      DOUBLE PRECISION FUNCTION DSIG1(PP,WGT,IMODE)
C     ****************************************************
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Process: u u~ > u u~
C     
C     RETURNS DIFFERENTIAL CROSS SECTION
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight, 
C     3 finalize, 4 only PDFs,
C     5 squared amplitude only (never
C     generate events)
C     Output:
C     Amplitude squared and summed
C     ****************************************************
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'maxamps.inc'
      DOUBLE PRECISION       CONV
      PARAMETER (CONV=389379.66*1000)  !CONV TO PICOBARNS
      REAL*8     PI
      PARAMETER (PI=3.1415926D0)
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION PP(0:3,NEXTERNAL), WGT
      INTEGER IMODE
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,ITYPE,LP,IPROC
      DOUBLE PRECISION QSCALE
      DOUBLE PRECISION U1
      DOUBLE PRECISION UX2
      DOUBLE PRECISION XPQ(-7:7),PD(0:MAXPROC)
      DOUBLE PRECISION DSIGUU,R,RCONF

      INTEGER LUN,ICONF,IFACT,NFACT
      DATA NFACT/1/
      SAVE NFACT
C     
C     STUFF FOR DRESSED EE COLLISIONS
C     
      INCLUDE '../../Source/PDF/eepdf.inc'
      DOUBLE PRECISION EE_COMP_PROD

      INTEGER I_EE
C     
C     STUFF FOR UPC
C     
      DOUBLE PRECISION PHOTONPDFSQUARE
C     
C     EXTERNAL FUNCTIONS
C     
      LOGICAL PASSCUTS
      DOUBLE PRECISION ALPHAS2,REWGT,PDG2PDF,CUSTOM_BIAS
      INTEGER NEXTUNOPEN
C     
C     GLOBAL VARIABLES
C     
      INTEGER          IPSEL
      COMMON /SUBPROC/ IPSEL
C     MINCFIG has this config number
      INTEGER           MINCFIG, MAXCFIG
      COMMON/TO_CONFIGS/MINCFIG, MAXCFIG
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     Keep track of whether cuts already calculated for this event
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED

      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      INCLUDE '../../Source/vector.inc'  ! defines VECSIZE_MEMMAX
      INCLUDE 'run.inc'
      INCLUDE '../../Source/PDF/pdf.inc'
C     Common blocks
      DOUBLE PRECISION RHEL, RCOL
      INTEGER SELECTED_HEL(VECSIZE_MEMMAX)
      INTEGER SELECTED_COL(VECSIZE_MEMMAX)
C     
C     local
C     
      DOUBLE PRECISION P1(0:3, NEXTERNAL)
      INTEGER CHANNEL
C     
C     DATA
C     
      DATA U1/1*1D0/
      DATA UX2/1*1D0/
C     ----------
C     BEGIN CODE
C     ----------
      DSIG1=0D0

      IF(IMODE.EQ.1)THEN
C       Set up process information from file symfact
        LUN=NEXTUNOPEN()
        NFACT=1
        OPEN(UNIT=LUN,FILE='../symfact.dat',STATUS='OLD',ERR=20)
        DO WHILE(.TRUE.)
          READ(LUN,*,ERR=10,END=10) RCONF, IFACT
          ICONF=INT(RCONF)
          IF(ICONF.EQ.MAPCONFIG(MINCFIG))THEN
            NFACT=IFACT
          ENDIF
        ENDDO
        DSIG1 = NFACT
 10     CLOSE(LUN)
        RETURN
 20     WRITE(*,*)'Error opening symfact.dat. No symmetry factor used.'
        RETURN
      ENDIF
C     Continue only if IMODE is 0, 4 or 5
      IF(IMODE.NE.0.AND.IMODE.NE.4.AND.IMODE.NE.5) RETURN


      IF (ABS(LPP(IB(1))).GE.1) THEN
C       LP=SIGN(1,LPP(IB(1)))
        IF (DSQRT(Q2FACT(IB(1))).EQ.0D0) THEN
          QSCALE=0D0
          DO I=3,NEXTERNAL
            QSCALE=QSCALE+DSQRT(MAX(0D0,(PP(0,I)+PP(3,I))*(PP(0,I)
     $       -PP(3,I))))
          ENDDO
          QSCALE=QSCALE/2D0
        ELSE
          QSCALE=DSQRT(Q2FACT(IB(1)))
        ENDIF
        U1=PDG2PDF(LPP(IB(1)),2, IB(1),XBK(IB(1)), QSCALE)
      ENDIF
      IF (ABS(LPP(IB(2))).GE.1) THEN
C       LP=SIGN(1,LPP(IB(2)))
        IF (DSQRT(Q2FACT(IB(2))).NE.0D0) THEN
          QSCALE=DSQRT(Q2FACT(IB(2)))
        ENDIF
        UX2=PDG2PDF(LPP(IB(2)),-2, IB(2),XBK(IB(2)), QSCALE)
      ENDIF
      PD(0) = 0D0
      IPROC = 0
      IPROC=IPROC+1  ! u u~ > u u~
      PD(IPROC)=U1*UX2
      PD(0)=PD(0)+DABS(PD(IPROC))
      IF (IMODE.EQ.4)THEN
        DSIG1 = PD(0)
        RETURN
      ENDIF
      IF(FRAME_ID.NE.6)THEN
        CALL BOOST_TO_FRAME(PP, FRAME_ID, P1)
      ELSE
        P1 = PP
      ENDIF

      CHANNEL = SUBDIAG(1)
      CALL RANMAR(RHEL)
      CALL RANMAR(RCOL)
      CALL SMATRIX1(P1,RHEL, RCOL,CHANNEL,1, DSIGUU, SELECTED_HEL(1),
     $  SELECTED_COL(1))


      IF (IMODE.EQ.5) THEN
        IF (DSIGUU.LT.1D199) THEN
          DSIG1 = DSIGUU*CONV
        ELSE
          DSIG1 = 0.0D0
        ENDIF
        RETURN
      ENDIF
C     Select a flavor combination (need to do here for right sign)
      CALL RANMAR(R)
      IPSEL=0
      DO WHILE (R.GE.0D0 .AND. IPSEL.LT.IPROC)
        IPSEL=IPSEL+1
        R=R-DABS(PD(IPSEL))/PD(0)
      ENDDO

      DSIGUU=DSIGUU*REWGT(PP,1)

C     Apply the bias weight specified in the run card (default is 1.0)
      DSIGUU=DSIGUU*CUSTOM_BIAS(PP,DSIGUU,1,1)

      DSIGUU=DSIGUU*NFACT

      IF (DSIGUU.LT.1D199) THEN
C       Set sign of dsig based on sign of PDF and matrix element
        DSIG1=DSIGN(CONV*PD(0)*DSIGUU,DSIGUU*PD(IPSEL))
      ELSE
        WRITE(*,*) 'Error in matrix element'
        DSIGUU=0D0
        DSIG1=0D0
      ENDIF
C     Generate events only if IMODE is 0.
      IF(IMODE.EQ.0.AND.DABS(DSIG1).GT.0D0)THEN
C       Call UNWGT to unweight and store events
        CALL UNWGT(PP,DSIG1*WGT,1,SELECTED_HEL(1), SELECTED_COL(1), 1)
      ENDIF

      END
C     
C     Functionality to handling grid
C     



      DOUBLE PRECISION FUNCTION DSIG1_VEC(ALL_PP, ALL_XBK, ALL_Q2FACT,
     $  ALL_CM_RAP, ALL_WGT, IMODE, ALL_OUT, SYMCONF, CONFSUB,
     $  ICONF_VEC, IMIRROR_VEC, VECSIZE_USED)
C     ****************************************************
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Process: u u~ > u u~
C     
C     RETURNS DIFFERENTIAL CROSS SECTION
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight, 
C     3 finalize, 4 only PDFs,
C     5 squared amplitude only (never
C     generate events)
C     Output:
C     Amplitude squared and summed
C     ****************************************************
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE '../../Source/vector.inc'  ! defines VECSIZE_MEMMAX
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'maxamps.inc'
      DOUBLE PRECISION       CONV
      PARAMETER (CONV=389379.66*1000)  !CONV TO PICOBARNS
      REAL*8     PI
      PARAMETER (PI=3.1415926D0)
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION ALL_PP(0:3,NEXTERNAL,VECSIZE_MEMMAX)
      DOUBLE PRECISION ALL_WGT(VECSIZE_MEMMAX)
      DOUBLE PRECISION ALL_XBK(2,VECSIZE_MEMMAX)
      DOUBLE PRECISION ALL_Q2FACT(2,VECSIZE_MEMMAX)
      DOUBLE PRECISION ALL_CM_RAP(VECSIZE_MEMMAX)
      INTEGER IMODE
      DOUBLE PRECISION ALL_OUT(VECSIZE_MEMMAX)
      INTEGER IMIRROR_VEC(*)
      INTEGER ICONF_VEC(*)
      INTEGER VECSIZE_USED
      INTEGER SYMCONF(0:LMAXCONFIGS)
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
C     ----------
C     BEGIN CODE
C     ----------
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,ITYPE,LP,IPROC
      DOUBLE PRECISION QSCALE
      DOUBLE PRECISION U1(VECSIZE_MEMMAX)
      DOUBLE PRECISION UX2(VECSIZE_MEMMAX)
      DOUBLE PRECISION XPQ(-7:7),PD(0:MAXPROC)
      DOUBLE PRECISION ALL_PD(0:MAXPROC, VECSIZE_MEMMAX)
      DOUBLE PRECISION DSIGUU,R,RCONF
      INTEGER LUN,ICONF,IFACT,NFACT
      DATA NFACT/1/
      SAVE NFACT
      DOUBLE PRECISION RHEL  ! random number
      INTEGER CHANNEL
C     
C     STUFF FOR DRESSED EE COLLISIONS --even if not supported for now--
C     
      INCLUDE '../../Source/PDF/eepdf.inc'
      DOUBLE PRECISION EE_COMP_PROD

      INTEGER I_EE
C     
C     EXTERNAL FUNCTIONS
C     
      LOGICAL PASSCUTS
      DOUBLE PRECISION ALPHAS2,REWGT,PDG2PDF,CUSTOM_BIAS
      INTEGER NEXTUNOPEN
      DOUBLE PRECISION DSIG1
C     
C     GLOBAL VARIABLES
C     
      INTEGER          IPSEL
      COMMON /SUBPROC/ IPSEL
C     MINCFIG has this config number
      INTEGER           MINCFIG, MAXCFIG
      COMMON/TO_CONFIGS/MINCFIG, MAXCFIG
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     Keep track of whether cuts already calculated for this event
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED

      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      INCLUDE 'run.inc'

      DOUBLE PRECISION P_MULTI(0:3, NEXTERNAL, VECSIZE_MEMMAX)
      DOUBLE PRECISION HEL_RAND(VECSIZE_MEMMAX)
      DOUBLE PRECISION COL_RAND(VECSIZE_MEMMAX)
      INTEGER SELECTED_HEL(VECSIZE_MEMMAX)
      INTEGER SELECTED_COL(VECSIZE_MEMMAX)
      DOUBLE PRECISION ALL_RWGT(VECSIZE_MEMMAX)

C     Common blocks
      CHARACTER*7         PDLABEL,EPA_LABEL
      INTEGER       LHAID
      COMMON/TO_PDF/LHAID,PDLABEL,EPA_LABEL

C     
C     local
C     
      DOUBLE PRECISION P1(0:3, NEXTERNAL)
      INTEGER IVEC, CURR_WARP, IWARP
      INTEGER CHANNELS(VECSIZE_MEMMAX)
C     
C     DATA
C     
      DATA U1/VECSIZE_MEMMAX*1D0/
      DATA UX2/VECSIZE_MEMMAX*1D0/
C     ----------
C     BEGIN CODE
C     ----------

      IF(IMODE.EQ.1)THEN
        NFACT = DSIG1(ALL_PP(0,1,1), ALL_WGT(1), IMODE)
        RETURN
      ENDIF

C     Continue only if IMODE is 0, 4 or 5
      IF(IMODE.NE.0.AND.IMODE.NE.4.AND.IMODE.NE.5) RETURN


      DO CURR_WARP=1, NB_WARP
        IF(IMIRROR_VEC(CURR_WARP).EQ.1)THEN
          IB(1) = 1
          IB(2) = 2
        ELSE
          IB(1) = 2
          IB(2) = 1
        ENDIF
        DO IWARP=1, WARP_SIZE
          IVEC = (CURR_WARP-1)*WARP_SIZE+IWARP
          IF (ABS(LPP(IB(1))).GE.1) THEN
C           LP=SIGN(1,LPP(IB(1)))
            U1(IVEC)=PDG2PDF(LPP(IB(1)),2, IB(1),ALL_XBK(IB(1),IVEC)
     $       ,DSQRT(ALL_Q2FACT(IB(1), IVEC)))
          ENDIF
          IF (ABS(LPP(IB(2))).GE.1) THEN
C           LP=SIGN(1,LPP(IB(2)))
            UX2(IVEC)=PDG2PDF(LPP(IB(2)),-2, IB(2),ALL_XBK(IB(2),IVEC)
     $       ,DSQRT(ALL_Q2FACT(IB(2), IVEC)))
          ENDIF
        ENDDO  ! IWARP LOOP
      ENDDO  ! CURRWARP LOOP
      ALL_PD(0,:) = 0D0
      IPROC = 0
      IPROC=IPROC+1  ! u u~ > u u~
      DO IVEC=1, VECSIZE_USED
        ALL_PD(IPROC,IVEC)=U1(IVEC)*UX2(IVEC)
        ALL_PD(0,IVEC)=ALL_PD(0,IVEC)+DABS(ALL_PD(IPROC,IVEC))

      ENDDO


      IF (IMODE.EQ.4)THEN
        ALL_OUT(:) = ALL_PD(0,:)
        RETURN
      ENDIF

      DO CURR_WARP=1, NB_WARP
        IF(IMIRROR_VEC(CURR_WARP).EQ.1)THEN
          IB(1) = 1
          IB(2) = 2
        ELSE
          IB(1) = 2
          IB(2) = 1
        ENDIF
        DO IWARP=1, WARP_SIZE
          IVEC = (CURR_WARP-1)*WARP_SIZE+IWARP
C         Do not need those three here. do I?	 
          XBK(:) = ALL_XBK(:,IVEC)
C         CM_RAP = ALL_CM_RAP(IVEC)
          Q2FACT(:) = ALL_Q2FACT(:, IVEC)


C         Select a flavor combination (need to do here for right sign)
          CALL RANMAR(R)
          IPSEL=0
          DO WHILE (R.GE.0D0 .AND. IPSEL.LT.IPROC)
            IPSEL=IPSEL+1
            R=R-DABS(ALL_PD(IPSEL,IVEC))/ALL_PD(0,IVEC)
          ENDDO

          CHANNELS(IVEC) = CONFSUB(1,SYMCONF(ICONF_VEC(CURR_WARP)))
          SUBDIAG(1) = CHANNELS(IVEC)  ! only valid if a single process
          CHANNEL = SUBDIAG(1)


          ALL_RWGT(IVEC) = REWGT(ALL_PP(0,1,IVEC), IVEC)

          IF(FRAME_ID.NE.6)THEN
            CALL BOOST_TO_FRAME(ALL_PP(0,1,IVEC), FRAME_ID, P_MULTI(0
     $       ,1,IVEC))
          ELSE
            P_MULTI(:,:,IVEC) = ALL_PP(:,:,IVEC)
          ENDIF
          CALL RANMAR(HEL_RAND(IVEC))
          CALL RANMAR(COL_RAND(IVEC))
        ENDDO  ! end loop on IWARP/IVEC	 
      ENDDO  ! end loop on the CURR_WARP
      CALL SMATRIX1_MULTI(P_MULTI, HEL_RAND, COL_RAND, CHANNELS,
     $  ALL_OUT , SELECTED_HEL, SELECTED_COL, VECSIZE_USED)


      DO IVEC=1,VECSIZE_USED
        DSIGUU = ALL_OUT(IVEC)
        IF (IMODE.EQ.5) THEN
          IF (DSIGUU.LT.1D199) THEN
            ALL_OUT(IVEC) = DSIGUU*CONV
          ELSE
            ALL_OUT(IVEC) = 0.0D0
          ENDIF
          RETURN
        ENDIF

        XBK(:) = ALL_XBK(:,IVEC)
C       CM_RAP = ALL_CM_RAP(IVEC)
        Q2FACT(:) = ALL_Q2FACT(:, IVEC)

        IF(FRAME_ID.NE.6)THEN
          CALL BOOST_TO_FRAME(ALL_PP(0,1,IVEC), FRAME_ID, P1)
        ELSE
          P1 = ALL_PP(:,:,IVEC)
        ENDIF
C       call restore_cl_val_to(ivec)
C       DSIGUU=DSIGUU*REWGT(P1,ivec)
        DSIGUU=DSIGUU*ALL_RWGT(IVEC)

C       Apply the bias weight specified in the run card (default is
C        1.0)
        DSIGUU=DSIGUU*CUSTOM_BIAS(P1,DSIGUU,1, IVEC)

        DSIGUU=DSIGUU*NFACT

        IF (DSIGUU.LT.1D199) THEN
C         Set sign of dsig based on sign of PDF and matrix element
          ALL_OUT(IVEC)=DSIGN(CONV*ALL_PD(0,IVEC)*DSIGUU,DSIGUU
     $     *ALL_PD(IPSEL,IVEC))
        ELSE
          WRITE(*,*) 'Error in matrix element'
          DSIGUU=0D0
          ALL_OUT(IVEC)=0D0
        ENDIF
C       Generate events only if IMODE is 0.
        IF(IMODE.EQ.0.AND.DABS(ALL_OUT(IVEC)).GT.0D0)THEN
C         Call UNWGT to unweight and store events
          CALL UNWGT(ALL_PP(0,1,IVEC), ALL_OUT(IVEC)*ALL_WGT(IVEC),1,
     $      SELECTED_HEL(IVEC), SELECTED_COL(IVEC), IVEC)
        ENDIF
      ENDDO

      END
C     
C     Functionality to handling grid
C     






      SUBROUTINE PRINT_ZERO_AMP1()

      RETURN
      END


      SUBROUTINE SMATRIX1_MULTI(P_MULTI, HEL_RAND, COL_RAND, CHANNELS,
     $  OUT, SELECTED_HEL, SELECTED_COL, VECSIZE_USED)
      USE OMP_LIB
      IMPLICIT NONE

      INCLUDE 'nexternal.inc'
      INCLUDE '../../Source/vector.inc'  ! defines VECSIZE_MEMMAX
      INCLUDE 'maxamps.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=16)
      DOUBLE PRECISION P_MULTI(0:3, NEXTERNAL, VECSIZE_MEMMAX)
      DOUBLE PRECISION HEL_RAND(VECSIZE_MEMMAX)
      DOUBLE PRECISION COL_RAND(VECSIZE_MEMMAX)
      INTEGER CHANNELS(VECSIZE_MEMMAX)
      DOUBLE PRECISION OUT(VECSIZE_MEMMAX)
      INTEGER SELECTED_HEL(VECSIZE_MEMMAX)
      INTEGER SELECTED_COL(VECSIZE_MEMMAX)
      INTEGER VECSIZE_USED

      INTEGER IVEC




!$OMP PARALLEL
!$OMP DO
      DO IVEC=1, VECSIZE_USED
        CALL SMATRIX1(P_MULTI(0,1,IVEC),
     &	                         hel_rand(IVEC),
     &                           col_rand(IVEC),
     &				 channels(IVEC),
     &                           IVEC,
     &				 out(IVEC),
     &				 selected_hel(IVEC),
     &				 selected_col(IVEC)
     &				 )
      ENDDO
!$OMP END DO
!$OMP END PARALLEL

      RETURN
      END

      INTEGER FUNCTION GET_NHEL1(HEL, IPART)
C     if hel>0 return the helicity of particule ipart for the selected
C      helicity configuration
C     if hel=0 return the number of helicity state possible for that
C      particle 
      IMPLICIT NONE
      INTEGER HEL,I, IPART
      INCLUDE 'nexternal.inc'
      INTEGER ONE_NHEL(NEXTERNAL)
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=16)
      INTEGER NHEL(NEXTERNAL,0:NCOMB)
      DATA (NHEL(I,0),I=1,4) / 2, 2, 2, 2/
      DATA (NHEL(I,   1),I=1,4) / 1,-1,-1, 1/
      DATA (NHEL(I,   2),I=1,4) / 1,-1,-1,-1/
      DATA (NHEL(I,   3),I=1,4) / 1,-1, 1, 1/
      DATA (NHEL(I,   4),I=1,4) / 1,-1, 1,-1/
      DATA (NHEL(I,   5),I=1,4) / 1, 1,-1, 1/
      DATA (NHEL(I,   6),I=1,4) / 1, 1,-1,-1/
      DATA (NHEL(I,   7),I=1,4) / 1, 1, 1, 1/
      DATA (NHEL(I,   8),I=1,4) / 1, 1, 1,-1/
      DATA (NHEL(I,   9),I=1,4) /-1,-1,-1, 1/
      DATA (NHEL(I,  10),I=1,4) /-1,-1,-1,-1/
      DATA (NHEL(I,  11),I=1,4) /-1,-1, 1, 1/
      DATA (NHEL(I,  12),I=1,4) /-1,-1, 1,-1/
      DATA (NHEL(I,  13),I=1,4) /-1, 1,-1, 1/
      DATA (NHEL(I,  14),I=1,4) /-1, 1,-1,-1/
      DATA (NHEL(I,  15),I=1,4) /-1, 1, 1, 1/
      DATA (NHEL(I,  16),I=1,4) /-1, 1, 1,-1/

      GET_NHEL1 = NHEL(IPART, IABS(HEL))
      RETURN
      END


