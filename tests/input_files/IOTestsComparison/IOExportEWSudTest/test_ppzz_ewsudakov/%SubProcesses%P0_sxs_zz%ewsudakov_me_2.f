      SUBROUTINE EWSDK_ME_2(P,NHEL,ANS_SUMMED)
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     
C     Return the sum of the split orders which are required in
C      orders.inc 
C     With respect to those at the born, the QED power is increased by
C      2
C     Note that helicities must be passed as an input argument.
C     
C     
C     Sudakov approximation for the interference between
C     Process: s~ s > z z [ LOonly = QCD QED ] QCD^2=2 QED^2=4
C     and
C     Process: s~ s > z a [ LOonly = QCD QED ] QCD^2=2 QED^2=4
C     
C     
C     CONSTANTS
C     
      IMPLICIT NONE
      INCLUDE 'nexternal.inc'
      INTEGER NSQAMPSO
      PARAMETER (NSQAMPSO=1)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL-1)
      DOUBLE COMPLEX ANS_SUMMED
      INTEGER NHEL(NEXTERNAL-1)
C     
C     VARIABLES
C     
      INTEGER I,J
      INCLUDE 'orders.inc'
      DOUBLE COMPLEX ANS(NSQAMPSO)
      LOGICAL KEEP_ORDER(NSQAMPSO)
      SAVE KEEP_ORDER
      INTEGER AMP_ORDERS(NSPLITORDERS)
      LOGICAL FIRSTTIME
      DATA FIRSTTIME / .TRUE. /
      DOUBLE PRECISION TINY
      PARAMETER (TINY = 1D-12)
      DOUBLE PRECISION MAX_VAL
      DOUBLE COMPLEX AMP_SPLIT_EWSUD(AMP_SPLIT_SIZE)
      COMMON /TO_AMP_SPLIT_EWSUD/ AMP_SPLIT_EWSUD
      INTEGER IDEN
      PARAMETER (IDEN = 72)
C     
C     FUNCTIONS
C     
      INTEGER GETORDPOWFROMINDEX_B
      INTEGER ORDERS_TO_AMP_SPLIT_POS
C     
C     BEGIN CODE
C     

      IF (FIRSTTIME) THEN
        DO I = 1, NSQAMPSO
          KEEP_ORDER(I) = .TRUE.
C         this is for the orders of the born to integrate
          DO J = 1, NSPLITORDERS
            IF(GETORDPOWFROMINDEX_B(J, I) .GT. BORN_ORDERS(J)) THEN
              KEEP_ORDER(I) = .FALSE.
              EXIT
            ENDIF
          ENDDO

            !if (keep_order(i)) then
            ! write(*,*) 'SDK2: keeping split order ', i
            !else
            ! write(*,*) 'SDK2: not keeping split order ', i
            !endif
        ENDDO

        FIRSTTIME = .FALSE.
      ENDIF

      CALL EWSUDAKOV_ME_2_SPLITORDERS(P,NHEL,ANS)
      ANS_SUMMED = (0D0,0D0)
      MAX_VAL = 0D0

C     reset the amp_split_ewsud array
      AMP_SPLIT_EWSUD(1:AMP_SPLIT_SIZE) = DCMPLX(0D0,0D0)


      DO I = 1, NSQAMPSO
        MAX_VAL = MAX(MAX_VAL, ABS(ANS(I)))
      ENDDO

      DO I = 1, NSQAMPSO
        IF (KEEP_ORDER(I)) THEN
          ANS_SUMMED = ANS_SUMMED + ANS(I)
          DO J = 1, NSPLITORDERS
            AMP_ORDERS(J) = GETORDPOWFROMINDEX_B(J, I)
          ENDDO
            !amp_split_ewsud(orders_to_amp_split_pos(amp_orders)) = ans(I)
          IF(ABS(ANS(I)).GT.MAX_VAL*TINY)
     $      AMP_SPLIT_EWSUD(ORDERS_TO_AMP_SPLIT_POS(AMP_ORDERS)) =
     $      ANS(I) / IDEN
        ENDIF
      ENDDO

C     this is to avoid fake non-zero contributions 
      IF (ABS(ANS_SUMMED).LT.MAX_VAL*TINY) ANS_SUMMED=0D0

      RETURN
      END




      SUBROUTINE EWSUDAKOV_ME_2_SPLITORDERS(P,NHEL,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     RETURNS THE INTERFERENCE OF THE BORN DIAGRAMS WITH THOSE
C     NEEDED FOR THE EVALUATION OF THE EW CORRECTIONS IN THE
C     SUDAKOV APPROCIMATION,
C     FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL-1)

C     Sudakov approximation for the interference between
C     Process: s~ s > z z [ LOonly = QCD QED ] QCD^2=2 QED^2=4
C     and
C     Process: s~ s > z a [ LOonly = QCD QED ] QCD^2=2 QED^2=4
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      INTEGER     NGRAPHS1, NGRAPHS2  ! graphs for the Born and Sudakov amplitude
      PARAMETER ( NGRAPHS1=2, NGRAPHS2=2)
      INTEGER NCOLOR1, NCOLOR2
      PARAMETER (NCOLOR1=1, NCOLOR2=1)
      INTEGER NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=6)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1 = (0D0,1D0))
      INCLUDE 'nexternal.inc'
      INCLUDE 'born_nhel.inc'
      INCLUDE 'coupl.inc'
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL-1)
      INTEGER NHEL(NEXTERNAL-1)
      DOUBLE COMPLEX ANS(NSQAMPSO)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      INTEGER IC(NEXTERNAL-1),NMO
      PARAMETER (NMO=NEXTERNAL-1)
      DATA IC /NMO*1/
      REAL*8 CF(NCOLOR2,NCOLOR1)
      COMPLEX*16 ZTEMP, AMP1(NGRAPHS1), AMP2(NGRAPHS2), JAMP1(NCOLOR1
     $ ,NAMPSO), JAMP2(NCOLOR2,NAMPSO), W(8,NWAVEFUNCS)
      COMPLEX*16 TMP_JAMP1(0)
      COMPLEX*16 TMP_JAMP2(0)
      REAL*8 P_SAVE(0:3, NEXTERNAL-1), P_RESH(0:3, NEXTERNAL-1)
      LOGICAL PASS_RESHUFFLE
C     CCC THIS IS PROBABLY UNNECESSARY, KEEP COMMENTED FOR THE TIME
C      BEING
C     Imag power takes into account the I factor when a longitudinal Z
C     boson is replaced by its goldstone (Chi). 
C     It is the difference of the number of Chi's in the first and
C      second amplitude which are interferred together
C     integer imag_power
C     data imag_power / 0 /

C     
C     GLOBAL VARIABLES
C     
C     
C     FUNCTION
C     
      INTEGER SQSOINDEXB
C     
C     COLOR DATA
C     
      DATA (CF(I,  1),I=  1,  1) /3.000000000000000D+00/
C     ----------
C     BEGIN CODE
C     ----------
C     Helas calls and color basis for the base amplitude
      CALL OXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL IXXXXX(P(0,2),ZERO,NHEL(2),+1*IC(2),W(1,2))
      CALL VXXXXX(P(0,3),MDL_MZ,NHEL(3),+1*IC(3),W(1,3))
      CALL VXXXXX(P(0,4),MDL_MZ,NHEL(4),+1*IC(4),W(1,4))
      CALL FFV2_3_1(W(1,1),W(1,3),GC_68,GC_76,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 1
      CALL FFV2_3_0(W(1,2),W(1,5),W(1,4),GC_68,GC_76,AMP1(1))
      CALL FFV2_3_1(W(1,1),W(1,4),GC_68,GC_76,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 2
      CALL FFV2_3_0(W(1,2),W(1,5),W(1,3),GC_68,GC_76,AMP1(2))
C     JAMPs contributing to orders QCD=0 QED=2
      JAMP1(1,1) = (-1.000000000000000D+00)*AMP1(1)+(
     $ -1.000000000000000D+00)*AMP1(2)

      DO I = 1, NSQAMPSO
        ANS(I) = (0D0,0D0)
      ENDDO

C     Reshuffle the momenta here
      P_SAVE(:,:) = P(:,:)
      PASS_RESHUFFLE = .TRUE.
      CALL RESHUFFLE_MOMENTA(P,P_RESH,(/4,0/),(/23,0/),(/22,0/)
     $ ,PASS_RESHUFFLE)
      P(:,:)=P_RESH(:,:)

      IF (.NOT.PASS_RESHUFFLE) THEN
C       restore the momenta and just quit the function
        P(:,:) = P_SAVE(:,:)
        RETURN
      ENDIF

C     Helas calls and color basis for the Sudakov amplitude
      CALL OXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL IXXXXX(P(0,2),ZERO,NHEL(2),+1*IC(2),W(1,2))
      CALL VXXXXX(P(0,3),MDL_MZ,NHEL(3),+1*IC(3),W(1,3))
      CALL VXXXXX(P(0,4),ZERO,NHEL(4),+1*IC(4),W(1,4))
      CALL FFV2_3_1(W(1,1),W(1,3),GC_68,GC_76,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 1
      CALL FFV1_0(W(1,2),W(1,5),W(1,4),GC_1,AMP2(1))
      CALL FFV1_1(W(1,1),W(1,4),GC_1,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 2
      CALL FFV2_3_0(W(1,2),W(1,5),W(1,3),GC_68,GC_76,AMP2(2))
C     JAMPs contributing to orders QCD=0 QED=2
      JAMP2(1,1) = (-1.000000000000000D+00)*AMP2(1)+(
     $ -1.000000000000000D+00)*AMP2(2)

C     Finally interfere the two sets of color-stripped amplitudes
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR1
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR2
            ZTEMP = ZTEMP + CF(J,I)*JAMP2(J,M)
          ENDDO
          DO N = 1, NAMPSO
            ANS(SQSOINDEXB(M,N))=ANS(SQSOINDEXB(M,N))+ZTEMP
     $       *DCONJG(JAMP1(I,N))
          ENDDO
        ENDDO
      ENDDO
C     C NOT NEEDED
C     include the imaginary factor if needed
C     if (imag_power.ne.0) ans(:) = ans(:) * imag1**imag_power 

      P(:,:) = P_SAVE(:,:)
      END



